AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation stack to create an S3 Bucket with versioning, a DynamoDB table with on-demand capacity, an ECR repository, and a Lambda function to manage S3 and ECR resources.

Parameters:
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket
    Default: my-s3-bucket

  DynamoDBTableName:
    Type: String
    Description: The name of the DynamoDB table
    Default: my-dynamodb-table

  ECRRepositoryName:
    Type: String
    Description: The name of the ECR repository
    Default: my-ecr-repository

Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled

  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH

  MyECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: false

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaS3ECRPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:ListBucket'
                  - 's3:DeleteObject'
                  - 's3:ListBucketVersions'
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}'
              - Effect: 'Allow'
                Action:
                  - 's3:DeleteObject'
                  - 's3:DeleteObjectVersion'
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
              
              - Effect: 'Allow'
                Action:
                  - 'ecr:ListImages'
                  - 'ecr:BatchDeleteImage'
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepositoryName}'

  CleanupLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'CleanupFunction'
      Runtime: 'python3.9'
      Handler: 'index.lambda_handler'
      Code:
        ZipFile: |
          import boto3
          import logging
          import os

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          s3 = boto3.client('s3')
          ecr = boto3.client('ecr')

          def lambda_handler(event, context):
              s3_bucket_name = os.environ['S3_BUCKET_NAME']
              ecr_repository_name = os.environ['ECR_REPOSITORY_NAME']
              
              try:
                  # Empty the S3 bucket
                  empty_s3_bucket(s3_bucket_name)
                  print(f"S3 bucket {s3_bucket_name} emptied successfully.")
                  
                  # Delete every version in the ECR repository
                  delete_ecr_images(ecr_repository_name)
                  print(f"ECR repository {ecr_repository_name} cleaned successfully.")
                  
                  return {
                      'statusCode': 200,
                      'body': 'Operation completed successfully'
                  }
              except Exception as e:
                  print(f"Error during cleanup: {e}")
                  return {
                      'statusCode': 500,
                      'body': 'Failed to complete the operation'
                  }

          def empty_s3_bucket(bucket_name):
            logger.info(f"Starting to empty bucket: {bucket_name}")
            
            # List and delete all objects
            try:
                objects = s3.list_objects_v2(Bucket=bucket_name)
                if 'Contents' in objects:
                    objects_to_delete = [{'Key': obj['Key']} for obj in objects['Contents']]
                    
                    # Delete objects
                    if objects_to_delete:
                        s3.delete_objects(Bucket=bucket_name, Delete={'Objects': objects_to_delete})
                        logger.info(f"Deleted {len(objects_to_delete)} objects from bucket: {bucket_name}")
                else:
                    logger.info("No objects to delete in bucket")
            except Exception as e:
                logger.error(f"Error while deleting objects: {e}")
                raise

            # List and delete all object versions (for versioned buckets)
            try:
                versions = s3.list_object_versions(Bucket=bucket_name)
                versions_to_delete = [{'Key': ver['Key'], 'VersionId': ver['VersionId']} for ver in versions.get('Versions', [])]
                delete_markers_to_delete = [{'Key': dm['Key'], 'VersionId': dm['VersionId']} for dm in versions.get('DeleteMarkers', [])]
                
                # Delete versions
                if versions_to_delete:
                    s3.delete_objects(Bucket=bucket_name, Delete={'Objects': versions_to_delete})
                    logger.info(f"Deleted {len(versions_to_delete)} object versions from bucket: {bucket_name}")

                # Delete delete markers
                if delete_markers_to_delete:
                    s3.delete_objects(Bucket=bucket_name, Delete={'Objects': delete_markers_to_delete})
                    logger.info(f"Deleted {len(delete_markers_to_delete)} delete markers from bucket: {bucket_name}")

            except Exception as e:
                logger.error(f"Error while deleting object versions or delete markers: {e}")
                raise
   
                      
          def delete_ecr_images(repository_name):
              paginator = ecr.get_paginator('list_images')
              for page in paginator.paginate(repositoryName=repository_name):
                  image_ids = page.get('imageIds', [])
                  if image_ids:
                      ecr.batch_delete_image(repositoryName=repository_name, imageIds=image_ids)

      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          ECR_REPOSITORY_NAME: !Ref ECRRepositoryName

Outputs:
  S3BucketNameOutput:
    Description: The name of the S3 bucket
    Value: !Ref MyS3Bucket

  ECRRepositoryURIOutput:
    Description: The URI of the ECR repository
    Value: !GetAtt MyECRRepository.RepositoryUri

  LambdaFunctionNameOutput:
    Description: The name of the Lambda function
    Value: !Ref CleanupLambdaFunction
